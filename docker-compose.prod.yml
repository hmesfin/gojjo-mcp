version: '3.8'

services:
  # Production MCP Server with OAuth authentication
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django-vue-mcp-server-prod
    environment:
      - HTTP_MODE=true
      - REDIS_URL=redis://redis:6379
      - BASE_URL=https://mcp.gojjoapps.com
      - ENVIRONMENT=production
      - WEB_PORT=8000
      - HEALTH_PORT=8080
    env_file:
      - .env.production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: django-vue-mcp-redis-prod
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: django-vue-mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - mcp-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Let's Encrypt SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: django-vue-mcp-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  redis_prod_data:

networks:
  mcp-network:
    driver: bridge