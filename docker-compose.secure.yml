services:
  # Secure MCP Server with OAuth
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.secure
    container_name: secure-django-vue-mcp-server
    restart: unless-stopped
    ports:
      - "8000:8000"   # Web Interface (OAuth)
      - "8080:8080"   # Health checks
    volumes:
      - ./src:/app/src:ro
      - ./docs:/app/docs:ro
      - .env.production.secure:/app/.env:ro
      - ./logs:/app/logs
      - /etc/ssl:/etc/ssl:ro  # SSL certificates
    environment:
      - DOCKER_MODE=true
      - HTTP_MODE=true  # Enable OAuth web mode
      - ENVIRONMENT=production
      - PYTHONPATH=/app/src
    env_file:
      - .env.production.secure
    depends_on:
      - redis
    networks:
      - mcp-secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1000:1000"  # Non-root user
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Secure Redis Cache
  redis:
    image: redis:7-alpine
    container_name: secure-django-vue-mcp-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
      --rename-command FLUSHDB ""
      --rename-command FLUSHALL ""
      --rename-command SHUTDOWN SHUTDOWN_REDIS
      --rename-command DEBUG ""
      --rename-command CONFIG REDIS_CONFIG
    volumes:
      - redis_data:/data
      - ./redis-secure.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - mcp-secure-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    read_only: true
    tmpfs:
      - /tmp

  # Nginx Reverse Proxy with Security
  nginx:
    image: nginx:alpine
    container_name: secure-django-vue-mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-security.conf:/etc/nginx/conf.d/security.conf:ro
      - /etc/ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-server
    networks:
      - mcp-secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "101:101"
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx

  # Log Aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian
    container_name: secure-django-vue-mcp-logs
    restart: unless-stopped
    volumes:
      - ./logs:/fluentd/log
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - mcp-secure-network
    depends_on:
      - mcp-server
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Monitoring (Prometheus - Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: secure-django-vue-mcp-monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - mcp-secure-network
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "65534:65534"
    read_only: true
    tmpfs:
      - /tmp

  # Security Scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: secure-django-vue-mcp-scanner
    command: >
      server
      --listen 0.0.0.0:4954
      --cache-dir /tmp/trivy/.cache
      --log-level INFO
    volumes:
      - trivy_cache:/tmp/trivy/.cache
    ports:
      - "4954:4954"
    networks:
      - mcp-secure-network
    profiles:
      - security
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  trivy_cache:
    driver: local

networks:
  mcp-secure-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: mcp-secure-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"

# Security and operational configurations
x-security-defaults: &security-defaults
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  read_only: true
  tmpfs:
    - /tmp

x-logging-defaults: &logging-defaults
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped