# Secure Nginx Configuration for Django Vue MCP Documentation Server
# Optimized for security, performance, and DDoS protection

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance and security events
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Security headers (global)
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # HSTS (enable only after SSL is working)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'none'; object-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'" always;
    
    # Hide nginx version
    server_tokens off;
    
    # Logging
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time $upstream_response_time '
                           '$request_length $connection_requests';
    
    access_log /var/log/nginx/access.log security_log;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 1m;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    gzip_disable "MSIE [1-6]\.";
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=health:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=120r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # DDoS protection
    limit_req_status 429;
    limit_conn_status 429;
    
    # Upstream backend
    upstream mcp_backend {
        server mcp-server:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream health_backend {
        server mcp-server:8080 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    # Security map for blocking
    map $http_user_agent $blocked_agent {
        default 0;
        ~*(bot|crawler|spider|scraper) 1;
        ~*(sqlmap|nmap|nikto|w3af|dirbuster) 1;
        "" 1;  # Empty user agent
    }
    
    # Geo blocking (example - add your own IP ranges)
    geo $blocked_ip {
        default 0;
        # Block common attack sources (example)
        # 1.2.3.0/24 1;
        # 5.6.7.0/24 1;
    }
    
    # HTTPS redirect server (port 80)
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        
        # Block suspicious requests
        if ($blocked_agent) {
            return 444;
        }
        
        if ($blocked_ip) {
            return 444;
        }
        
        # Health check exception (allow HTTP for Docker health checks)
        location /health {
            limit_req zone=health burst=10 nodelay;
            limit_conn conn_limit_per_ip 5;
            
            proxy_pass http://health_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security
            proxy_hide_header X-Powered-By;
            proxy_set_header X-Request-ID $request_id;
            
            access_log /var/log/nginx/health.log security_log;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # HTTPS server (port 443)
    server {
        listen 443 ssl http2;
        server_name your-domain.com www.your-domain.com;
        
        # SSL Configuration
        ssl_certificate /etc/ssl/certs/domain.crt;
        ssl_certificate_key /etc/ssl/private/domain.key;
        
        # SSL Security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Security blocking
        if ($blocked_agent) {
            return 444;
        }
        
        if ($blocked_ip) {
            return 444;
        }
        
        # Root location - API endpoints
        location / {
            limit_req zone=api burst=50 nodelay;
            limit_conn conn_limit_per_ip 10;
            
            # Security validations
            if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
                return 405;
            }
            
            if ($request_uri ~ "\.\.") {
                return 400;
            }
            
            # Proxy to MCP backend
            proxy_pass http://mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Security headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            access_log /var/log/nginx/api.log security_log;
        }
        
        # Health check endpoints
        location /health {
            limit_req zone=health burst=20 nodelay;
            limit_conn conn_limit_per_ip 5;
            
            proxy_pass http://health_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            access_log /var/log/nginx/health.log security_log;
        }
        
        # Metrics endpoint (restrict access)
        location /metrics {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            limit_req zone=health burst=5 nodelay;
            
            proxy_pass http://health_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            access_log /var/log/nginx/metrics.log security_log;
        }
        
        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ \.(env|git|svn|log|bak)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Security testing endpoints (disable in production)
        location ~ /(admin|wp-admin|phpmyadmin|test) {
            return 444;
        }
        
        # Robots.txt
        location = /robots.txt {
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /admin\nDisallow: /metrics\n";
        }
        
        # Favicon
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }
    }
    
    # Default server (catch-all)
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        
        # Use a self-signed cert for default server
        ssl_certificate /etc/ssl/certs/default.crt;
        ssl_certificate_key /etc/ssl/private/default.key;
        
        return 444;
    }
}

# Stream module for TCP/UDP load balancing (if needed)
stream {
    # Log format
    log_format stream_log '$remote_addr [$time_local] '
                         '$protocol $status $bytes_sent $bytes_received '
                         '$session_time "$upstream_addr" '
                         '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    
    # Rate limiting for stream
    limit_conn_zone $binary_remote_addr zone=stream_conn:10m;
}

# Security notes:
# 1. Replace 'your-domain.com' with your actual domain
# 2. Configure SSL certificates properly
# 3. Adjust rate limits based on your needs
# 4. Enable HSTS only after SSL is working
# 5. Monitor logs for security events
# 6. Consider adding fail2ban for IP blocking
# 7. Regular security updates for nginx
# 8. Test configuration: nginx -t
# 9. Reload configuration: nginx -s reload